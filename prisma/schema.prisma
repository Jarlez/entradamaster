generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ───────── Enums ─────────
enum Role {
  USER
  ADMIN
  PROMOTER
  FINANCE
  SUPPORT
}

enum EventStatus {
  OPEN
  SOLD_OUT
  FINISHED
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  EXPIRED
}

enum PaymentProvider {
  PAGOTIC
}

enum PaymentStatus {
  PENDING
  APPROVED
  FAILED
  CANCELLED
}

enum EventType {
  SEATED
  GENERAL
}

enum SeatStatus {
  AVAILABLE
  RESERVED
  SOLD
}

// ───────── Models ─────────
model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  name          String?
  password      String?
  dniName       String?
  dni           String?
  phone         String?
  birthdate     DateTime?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @default("https://definicion.de/wp-content/uploads/2019/07/perfil-de-usuario.png")
  role          Role      @default(USER)
  provider      String?

  accounts        Account[]
  sessions        Session[]
  organizedEvents Event[]   @relation("OrganizerEvents")

  enrollments   Enrollment[]
  notifications Notification[] @relation("UserNotifications")

  orders           Order[]
  tickets          Ticket[]
  validatedTickets Ticket[] @relation("UserValidatedTickets")

  cartItems      CartItem[]
  seats          Seat[]
  validationLogs ValidationLog[] @relation("UserValidatedTickets")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  userId    String
  createdAt DateTime @default(now())

  user User @relation("UserNotifications", fields: [userId], references: [id])
}

model Category {
  id    String @id @default(cuid())
  title String

  events Event[]
}

model Artist {
  id        String   @id @default(cuid())
  name      String
  bio       String?
  image     String?
  createdAt DateTime @default(now())

  appearances EventArtist[]
}

model EventArtist {
  eventId  String
  artistId String

  event  Event  @relation(fields: [eventId], references: [id])
  artist Artist @relation(fields: [artistId], references: [id])

  @@id([eventId, artistId])
}

model Event {
  id           String      @id @default(cuid())
  name         String
  slug         String      @unique
  description  String?
  image        String?
  city         String
  state        String
  venueName    String
  zipCode      String
  neighborhood String
  street       String
  number       String
  publishedAt  DateTime?
  status       EventStatus @default(OPEN)
  eventType    EventType   @default(GENERAL)
  capacity     Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  categoryId  String
  organizerId String

  category  Category @relation(fields: [categoryId], references: [id])
  organizer User     @relation("OrganizerEvents", fields: [organizerId], references: [id])

  enrollments      Enrollment[]
  ticketCategories TicketCategory[]
  eventSessions    EventSession[]
  orders           Order[]
  seats            Seat[]
  tickets          Ticket[]

  artists EventArtist[]
}

model Enrollment {
  userId    String
  eventId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@id([userId, eventId])
}

model EventSession {
  id        String   @id @default(cuid())
  date      DateTime
  venueName String
  city      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventId String
  event   Event  @relation(fields: [eventId], references: [id])

  seats     Seat[]
  tickets   Ticket[]
  orders    Order[]
  cartItems CartItem[]

  @@index([eventId])
}

model TicketCategory {
  id       String @id @default(cuid())
  title    String
  price    Float
  capacity Int    @default(0)

  eventId String
  event   Event  @relation(fields: [eventId], references: [id])

  seats      Seat[]
  orderItems OrderItem[]
  tickets    Ticket[]
}

model Seat {
  id        String     @id @default(cuid())
  label     String
  row       String
  number    Int
  status    SeatStatus @default(AVAILABLE)
  createdAt DateTime   @default(now())

  eventSessionId   String
  ticketCategoryId String
  userId           String?
  eventId          String

  eventSession   EventSession   @relation(fields: [eventSessionId], references: [id])
  ticketCategory TicketCategory @relation(fields: [ticketCategoryId], references: [id])
  user           User?          @relation(fields: [userId], references: [id])
  event          Event          @relation(fields: [eventId], references: [id])

  orderItems OrderItem[]
  ticket     Ticket?
  cartItems  CartItem[]

  @@index([eventId])
  @@index([eventSessionId, status])
}

model CartItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId         String
  eventSessionId String
  seatId         String

  user         User         @relation(fields: [userId], references: [id])
  eventSession EventSession @relation(fields: [eventSessionId], references: [id])
  seat         Seat         @relation(fields: [seatId], references: [id])

  @@unique([userId, seatId])
}

model Order {
  id                    String      @id @default(cuid())
  status                OrderStatus
  total                 Float
  createdAt             DateTime    @default(now())
  expiresAt             DateTime?
  externalTransactionId String?     @unique
  paymentNumber         String?     @unique
  formUrl               String?     // URL de checkout do PayPerTIC

  userId         String
  eventSessionId String
  eventId        String

  user         User         @relation(fields: [userId], references: [id])
  eventSession EventSession @relation(fields: [eventSessionId], references: [id])
  event        Event        @relation(fields: [eventId], references: [id])

  orderItems OrderItem[]
  payment    Payment?

  @@index([status])
}

model OrderItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  orderId          String
  seatId           String?
  ticketCategoryId String?
  qty              Int     @default(1)

  title             String
  description       String
  amount            Float   // total do item (unitPrice * qty)
  currency          String  @default("ARS")
  conceptId         String  @default("woocommerce")
  externalReference String?

  order          Order           @relation(fields: [orderId], references: [id])
  seat           Seat?           @relation(fields: [seatId], references: [id])
  ticket         Ticket?
  ticketCategory TicketCategory? @relation(fields: [ticketCategoryId], references: [id])

  @@unique([orderId, seatId])
  @@unique([orderId, ticketCategoryId])
}

model Ticket {
  id        String    @id @default(cuid())
  qrCodeUrl String
  pdfUrl    String?
  usedAt    DateTime?
  device    String?
  createdAt DateTime  @default(now())

  eventSessionId   String
  seatId           String? @unique
  orderItemId      String  @unique
  userId           String
  eventId          String
  validatorId      String?
  ticketCategoryId String?

  eventSession   EventSession    @relation(fields: [eventSessionId], references: [id])
  seat           Seat?           @relation(fields: [seatId], references: [id])
  orderItem      OrderItem       @relation(fields: [orderItemId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  event          Event           @relation(fields: [eventId], references: [id])
  validator      User?           @relation("UserValidatedTickets", fields: [validatorId], references: [id])
  ticketCategory TicketCategory? @relation(fields: [ticketCategoryId], references: [id])

  validationLogs ValidationLog[] @relation("TicketValidationLogs")

  @@index([qrCodeUrl])
}

model Payment {
  id          String          @id @default(cuid())
  provider    PaymentProvider
  status      PaymentStatus
  amount      Float
  metadata    Json?
  rawResponse Json?
  createdAt   DateTime        @default(now())

  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id])
}

model ValidationLog {
  id        String   @id @default(cuid())
  device    String?
  createdAt DateTime @default(now())

  ticketId    String
  validatorId String?

  ticket    Ticket @relation("TicketValidationLogs", fields: [ticketId], references: [id])
  validator User?  @relation("UserValidatedTickets", fields: [validatorId], references: [id])
}
