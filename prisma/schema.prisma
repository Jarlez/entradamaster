generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum EventStatus {
  OPEN
  SOLD_OUT
  FINISHED
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  EXPIRED
}

enum PaymentProvider {
  PAGOTIC
}

enum PaymentStatus {
  PENDING
  APPROVED
  FAILED
  CANCELLED
}

enum SeatStatus {
  AVAILABLE
  RESERVED
  SOLD
}

// Models
model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  name          String?
  password      String?
  dniName       String?
  dni           String?
  phone         String?
  birthdate     DateTime?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @default("https://definicion.de/wp-content/uploads/2019/07/perfil-de-usuario.png")
  role          Role      @default(USER)
  provider      String?

  accounts         Account[]         // OAuth
  sessions         SessionAuth[]     @relation("UserSessions")
  organizedEvents  Event[]           @relation("OrganizerEvents")
  enrolledEvents   Event[]           @relation("EnrolledUsers")
  notifications    Notification[]    @relation("UserNotifications")
  orders           Order[]
  validatedTickets Ticket[]          @relation("UserValidatedTickets")
  tickets          Ticket[]
  seats            Seat[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])
}

model SessionAuth {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation("UserSessions", fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  userId    String
  user      User     @relation("UserNotifications", fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Category {
  id     String  @id @default(cuid())
  title  String
  events Event[]
}

model Event {
  id               String           @id @default(cuid())
  name             String
  slug             String           @unique
  description      String?
  image            String?
  city             String
  state            String
  venueName        String
  zipCode          String
  neighborhood     String
  street           String
  number           String
  publishedAt      DateTime?
  status           EventStatus      @default(OPEN)
  capacity         Int              @default(0)
  categoryId       String
  category         Category         @relation(fields: [categoryId], references: [id])
  organizerId      String
  organizer        User             @relation("OrganizerEvents", fields: [organizerId], references: [id])
  enrolledUsers    User[]           @relation("EnrolledUsers")
  ticketCategories TicketCategory[]
  sessions         Session[]
  orders           Order[]
  seats            Seat[]
  tickets          Ticket[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Session {
  id        String   @id @default(cuid())
  date      DateTime
  venueName String
  city      String
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  seats     Seat[]
  tickets   Ticket[]
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
}

model TicketCategory {
  id      String @id @default(cuid())
  title   String
  price   Float
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])
  seats   Seat[]
}

model Seat {
  id               String         @id @default(cuid())
  label            String
  row              String
  number           Int
  status           SeatStatus     @default(AVAILABLE)
  sessionId        String
  session          Session        @relation(fields: [sessionId], references: [id])
  ticketCategoryId String
  ticketCategory   TicketCategory @relation(fields: [ticketCategoryId], references: [id])
  userId           String
  user             User           @relation(fields: [userId], references: [id])
  eventId          String
  event            Event          @relation(fields: [eventId], references: [id])
  orderItems       OrderItem[]
  ticket           Ticket?
  createdAt        DateTime       @default(now())

  @@index([eventId])
  @@index([sessionId, status])
}

model Order {
  id                    String      @id @default(cuid())
  userId                String
  user                  User        @relation(fields: [userId], references: [id])
  sessionId             String
  session               Session     @relation(fields: [sessionId], references: [id])
  eventId               String
  event                 Event       @relation(fields: [eventId], references: [id])
  status                OrderStatus
  total                 Float
  createdAt             DateTime    @default(now())
  orderItems            OrderItem[]
  payment               Payment?
  externalTransactionId String?     @unique
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  seatId    String
  createdAt DateTime @default(now())

  order     Order @relation(fields: [orderId], references: [id])
  seat      Seat  @relation(fields: [seatId], references: [id])
  ticket    Ticket?

  @@unique([orderId, seatId])
}

model Ticket {
  id          String    @id @default(cuid())
  qrCodeUrl   String
  pdfUrl      String?
  usedAt      DateTime?
  device      String?
  sessionId   String
  session     Session   @relation(fields: [sessionId], references: [id])
  seatId      String    @unique
  seat        Seat      @relation(fields: [seatId], references: [id])
  orderItemId String    @unique
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  eventId     String
  event       Event     @relation(fields: [eventId], references: [id])
  validatorId String?
  validator   User?     @relation("UserValidatedTickets", fields: [validatorId], references: [id])
  createdAt   DateTime  @default(now())
}

model Payment {
  id          String          @id @default(cuid())
  orderId     String          @unique
  order       Order           @relation(fields: [orderId], references: [id])
  provider    PaymentProvider
  status      PaymentStatus
  amount      Float
  metadata    Json?
  rawResponse Json?
  createdAt   DateTime        @default(now())
}
