// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  name          String?
  password      String?
  DNIName       String?
  DNI           String?
  phone         String?
  birthdate     String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?        @default("https://definicion.de/wp-content/uploads/2019/07/perfil-de-usuario.png")
  role          Role           @default(USER)
  Events        Event[]        @relation("Event")
  enrolledIn    Event[]        @relation("EnrolledIn")
  accounts      Account[]
  sessions      Session[]
  Notification  Notification[] @relation("Notification")
  provider      String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Publish     User       @relation("Event", fields: [userId], references: [id])
  userId      String
  name        String
  description String     @db.Text
  city        String
  theater     String
  price       String
  date        DateTime
  Category    Category[]
  clients     User[]     @relation("EnrolledIn")
}

model Category {
  id     String  @id @default(cuid())
  title  String
  events Event[]
}

model Notification {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  title       String
  description String
  user        User     @relation("Notification", fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

enum Role {
  USER
  ADMIN
}
