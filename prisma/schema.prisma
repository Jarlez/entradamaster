generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  USER
  ADMIN
  ORGANIZER
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  EXPIRED
}

enum PaymentProvider {
  STRIPE
}

enum PaymentStatus {
  PENDING
  APPROVED
  FAILED
  CANCELLED
}

// Auth (NextAuth)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Domain Models
model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  name          String?
  password      String?
  dniName       String?
  dni           String?
  phone         String?
  birthdate     DateTime?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @default("https://definicion.de/wp-content/uploads/2019/07/perfil-de-usuario.png")
  role          Role      @default(USER)
  provider      String?

  // Relations
  accounts         Account[]
  sessions         Session[]
  organizedEvents  Event[]        @relation("OrganizerEvents")
  enrolledEvents   Event[]        @relation("EnrolledUsers")
  notifications    Notification[] @relation("UserNotifications")
  orders           Order[]
  validatedTickets Ticket[]       @relation("UserValidatedTickets")
}

model Event {
  id          String      @id @default(cuid())
  name        String
  description String
  city        String
  theater     String
  price       Float
  date        DateTime
  saleStart   DateTime    @default(now())
  saleEnd     DateTime    @default(now())
  capacity    Int         @default(0)
  slug        String      @unique @default("")
  status      EventStatus @default(DRAFT)
  userId      String
  user        User        @relation("OrganizerEvents", fields: [userId], references: [id])

  categories       Category[]       @relation("EventCategories")
  enrolledUsers    User[]           @relation("EnrolledUsers")
  orders           Order[]
  ticketCategories TicketCategory[]
}

model Category {
  id         String      @id @default(cuid())
  title      String      @unique
  events     Event[]     @relation("EventCategories")
  orderItems OrderItem[]
}

model Notification {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  title       String
  description String
  userId      String
  user        User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  status    OrderStatus @default(PENDING)
  total     Float
  userId    String
  eventId   String
  expiresAt DateTime?   @default(dbgenerated())

  user    User        @relation(fields: [userId], references: [id])
  event   Event       @relation(fields: [eventId], references: [id])
  items   OrderItem[]
  Payment Payment[]
  Invoice Invoice[]

  @@index([userId])
  @@index([eventId])
}

model OrderItem {
  id               String @id @default(cuid())
  price            Float
  quantity         Int
  categoryId       String
  orderId          String
  ticketCategoryId String

  category       Category       @relation(fields: [categoryId], references: [id])
  order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  TicketCategory TicketCategory @relation(fields: [ticketCategoryId], references: [id])
  Ticket         Ticket[]
}

model TicketCategory {
  id         String      @id @default(cuid())
  title      String      @unique
  price      Float
  stock      Int
  eventId    String
  event      Event       @relation(fields: [eventId], references: [id])
  orderItems OrderItem[]
}

model Ticket {
  id            String    @id @default(cuid())
  orderItemId   String
  qrCodeUrl     String
  pdfUrl        String?
  walletPassUrl String?
  usedAt        DateTime?
  validatedById String?
  device        String?
  orderItem     OrderItem @relation(fields: [orderItemId], references: [id])
  validatedBy   User?     @relation("UserValidatedTickets", fields: [validatedById], references: [id])

  @@index([orderItemId])
}

model Payment {
  id          String          @id @default(cuid())
  orderId     String
  provider    PaymentProvider
  status      PaymentStatus   @default(PENDING)
  amount      Float
  rawResponse Json
  createdAt   DateTime        @default(now())

  order Order @relation(fields: [orderId], references: [id])
}

model Invoice {
  id        String   @id @default(cuid())
  orderId   String
  cuitOrDni String?
  pdfUrl    String?
  createdAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id])
}

/// Stores raw webhook events for debugging, audits or recovery purposes
model WebhookLog {
  id        String   @id @default(cuid())
  provider  String // ex: "stripe", "mercadopago"
  eventType String // ex: "payment_intent.succeeded"
  payload   Json // full payload from webhook event
  createdAt DateTime @default(now())

  @@index([provider, eventType])
}
