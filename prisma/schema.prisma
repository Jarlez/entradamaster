// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NextAuth models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

// Core application models

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  name          String?
  password      String?
  DNIName       String?
  DNI           String?
  phone         String?
  birthdate     String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @default("https://definicion.de/wp-content/uploads/2019/07/perfil-de-usuario.png")
  role          Role      @default(USER)
  provider      String?

  // Relations
  accounts     Account[]
  sessions     Session[]
  Events       Event[]        @relation("Event") // eventos publicados
  enrolledIn   Event[]        @relation("EnrolledIn") // eventos inscritos
  Notification Notification[] @relation("Notification")
  orders       Order[] // pedidos do usu√°rio
}

model Event {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  description String   @db.Text
  city        String
  theater     String
  price       Float
  date        DateTime

  // FK to publisher
  Publish User   @relation("Event", fields: [userId], references: [id])
  userId  String

  // Relations
  Category       Category[]
  clients        User[]           @relation("EnrolledIn")
  orders         Order[] // pedidos vinculados ao evento
  TicketCategory TicketCategory[]
}

model Category {
  id    String @id @default(cuid())
  title String @unique

  // Relations
  events     Event[]
  orderItems OrderItem[] // itens de pedido nesta categoria
}

model Notification {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  title       String
  description String
  user        User     @relation("Notification", fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

model Order {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  status    OrderStatus @default(PENDING)
  total     Float

  // FK to user
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // FK to event
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  // Items
  items   OrderItem[]
  Payment Payment[]
  Invoice Invoice[]
}

model OrderItem {
  id       String @id @default(cuid())
  price    Float
  quantity Int

  // FK to category (tipo de ingresso)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  // FK to order
  order            Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId          String
  TicketCategory   TicketCategory @relation(fields: [ticketCategoryId], references: [id])
  ticketCategoryId String
  Ticket           Ticket[]
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

enum PaymentProvider {
  STRIPE
  MERCADOPAGO
  PAGOFACIL
  RAPIPAGO
}

model TicketCategory {
  id         String      @id @default(cuid())
  title      String      @unique
  price      Float
  stock      Int
  eventId    String
  event      Event       @relation(fields: [eventId], references: [id])
  orderItems OrderItem[]
}

model Payment {
  id          String          @id @default(cuid())
  orderId     String
  provider    PaymentProvider
  status      String
  amount      Float
  rawResponse Json
  createdAt   DateTime        @default(now())

  order Order @relation(fields: [orderId], references: [id])
}

model Invoice {
  id        String   @id @default(cuid())
  orderId   String
  cuitOrDni String?
  pdfUrl    String?
  createdAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id])
}

model Ticket {
  id            String    @id @default(cuid())
  orderItemId   String
  qrCodeUrl     String
  pdfUrl        String?
  walletPassUrl String?
  usedAt        DateTime?

  orderItem OrderItem @relation(fields: [orderItemId], references: [id])
}
